# API for tsmp package

## Exported functions

as.arccount(.mp)
as.chain(.mp)
as.discord(.mp)
as.fluss(.mp)
as.matrixprofile(.mp)
as.motif(.mp)
as.multimatrixprofile(.mp)
as.multimotif(.mp)
as.salient(.mp)
as.valmod(.mp)
av_apply(.mp)
av_complexity(.mp, data, dilution_factor = 0, apply = FALSE)
av_hardlimit_artifact(.mp, data, apply = FALSE)
av_motion_artifact(.mp, data, apply = FALSE)
av_stop_word(.mp, data, stop_word_loc, exclusion_zone = NULL, threshold = 0.1, apply = FALSE)
av_zerocrossing(.mp, data, apply = FALSE)
dist_profile(data, query, ..., window_size = NULL, method = "v3", index = 1, k = NULL, weight = NULL, paa = 1)
fast_movavg(data, window_size)
fast_movsd(data, window_size)
find_chains(.mp)
find_discord(.mp, ...)
find_motif(.mp, ...)
floss(.mp, new_data, data_window, threshold = 1, exclusion_zone = NULL, chunk_size = NULL, keep_cac = TRUE)
floss_cac(.mp, data_window, exclusion_zone = NULL)
floss_extract(.mpac, threshold = 1, exclusion_zone = NULL)
fluss(.mp, num_segments = 1, exclusion_zone = NULL)
fluss_cac(.mp, exclusion_zone = NULL)
fluss_extract(.mpac, num_segments = 1, exclusion_zone = NULL)
fluss_score(gtruth, extracted, data_size)
get_data(.mp)
mass(data_fft, query_window, data_size, window_size, data_mean, data_sd, query_mean, query_sd)
mass_pre(data, query = NULL, window_size)
min_mp_idx(.mp, n_dim = NULL, valid = TRUE)
mstomp(data, window_size, exclusion_zone = 1/2, verbose = 2, must_dim = NULL, exc_dim = NULL)
mstomp_par(data, window_size, exclusion_zone = 1/2, verbose = 2, must_dim = NULL, exc_dim = NULL, n_workers = 2)
plot_arcs(pairs, alpha = NULL, quality = 30, lwd = 15, col = c("blue", "orange"), main = "Arc Plot", ylab, xlab = "Profile Index", xmin = NULL, xmax = NULL, ...)
remove_class(x, class)
salient_mds(.mp, data, bit_idx = 1)
salient_score(.mp, gtruth)
salient_subsequences(.mp, data, n_bits = 8, n_cand = 10, exclusion_zone = NULL, verbose = 2)
scrimp(..., window_size, exclusion_zone = 1/2, verbose = 2, s_size = Inf, pre_scrimp = 1/4)
sdts_predict(model, data, window_size)
sdts_score(pred, gtruth, beta = 1)
sdts_train(data, label, window_size, beta = 1, pat_max = Inf, parallel = TRUE, verbose = 2)
set_data(.mp, data)
simple_fast(..., window_size, exclusion_zone = 1/2, verbose = 2)
stamp(..., window_size, exclusion_zone = 1/2, verbose = 2, s_size = Inf, weight = NULL)
stamp_par(..., window_size, exclusion_zone = 1/2, verbose = 2, s_size = Inf, n_workers = 2, weight = NULL)
stomp(..., window_size, exclusion_zone = 1/2, verbose = 2)
stomp_par(..., window_size, exclusion_zone = 1/2, verbose = 2, n_workers = 2)
stompi_update(.mp, new_data, history_size = FALSE)
tsmp(..., window_size, exclusion_zone = 1/2, mode = c("stomp", "stamp", "simple", "mstomp", "scrimp", "valmod"), verbose = 2, n_workers = 1, s_size = Inf, must_dim = NULL, exc_dim = NULL, heap_size = 50, paa = 1, .keep_data = TRUE)
valmod(..., window_min, window_max, heap_size = 50, exclusion_zone = 1/2, lb = TRUE, verbose = 2)

## Own S3 methods

find_discord.MatrixProfile(.mp, data, n_discords = 1, n_neighbors = 3, radius = 3, exclusion_zone = NULL, ...)
find_motif.MatrixProfile(.mp, data, n_motifs = 3, n_neighbors = 10, radius = 3, exclusion_zone = NULL, ...)
find_motif.MultiMatrixProfile(.mp, data, n_motifs = 3, mode = c("guided", "unconstrained"), n_bit = 4, exclusion_zone = NULL, n_dim = NULL, ...)

## Foreign S3 methods

plot.ArcCount(x, data, type = c("data", "matrix"), exclusion_zone = NULL, edge_limit = NULL, threshold = stats::quantile(x$cac, 0.1), main = "Arcs Discover", xlab = "index", ylab, ...)
plot.Chain(x, data, type = c("data", "matrix"), main = "Chain Discover", xlab = "index", ylab, ...)
plot.Discord(x, data, type = c("data", "matrix"), ncol = 3, main = "Discord Discover", xlab = "index", ylab, ...)
plot.Floss(x, data, type = c("data", "matrix"), main = "Fast Low-cost Online Semantic Segmentation", xlab = "index", ylab, ...)
plot.Fluss(x, data, type = c("data", "matrix"), main = "Fast Low-cost Unipotent Semantic Segmentation", xlab = "index", ylab, ...)
plot.MatrixProfile(x, ylab = "distance", xlab = "index", main = "Unidimensional Matrix Profile", data = FALSE, ...)
plot.Motif(x, data, type = c("data", "matrix"), ncol = 3, main = "MOTIF Discover", xlab = "index", ylab, ...)
plot.MultiMatrixProfile(x, ylab = "distance", xlab = "index", main = "Multidimensional Matrix Profile", ...)
plot.MultiMotif(x, data, type = c("data", "matrix"), ncol = 3, main = "Multidimensional MOTIF Discover", xlab = "index", ylab, ...)
plot.Salient(x, data, main = "Salient Subsections", xlab = "index", ylab, ...)
plot.SimpleMatrixProfile(x, ylab = "distance", xlab = "index", main = "SiMPle Matrix Profile", data = FALSE, ...)
plot.Valmod(x, ylab = "distance", xlab = "index", main = "Valmod Matrix Profile", data = FALSE, ...)
print.ArcCount(x, ...)
print.Chain(x, ...)
print.Discord(x, ...)
print.Floss(x, ...)
print.Fluss(x, ...)
print.MatrixProfile(x, ...)
print.Motif(x, ...)
print.MultiMatrixProfile(x, ...)
print.MultiMotif(x, ...)
print.Salient(x, ...)
print.SimpleMatrixProfile(x, ...)
print.Valmod(x, ...)

## Reexported objects

::%>%
::%T>%
